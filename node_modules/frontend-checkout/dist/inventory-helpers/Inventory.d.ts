import { ProductType } from '../types';
import { InventoryHelper, PlatformInventoryHelper, InventoryJSONResponse, ItemId } from './types';
import { BigCommerceInventory } from './platforms/big-commerce/types';
import { ShopifyInventory } from './platforms/shopify/types';
declare class Inventory implements InventoryHelper {
    private platform;
    private productInventoryUrl;
    constructor({ platform }: {
        platform: PlatformInventoryHelper;
    });
    fetchInventory(): Promise<InventoryJSONResponse>;
    refreshInventoryOnInterval(callback: (inventoryData: InventoryJSONResponse) => void): number | undefined;
    fetchProductsInventory(itemIds: ItemId[], productType?: ProductType): Promise<BigCommerceInventory | ShopifyInventory>;
    refreshPlatformInventory({ ids, interval, productType, callback, }: {
        ids: ItemId[];
        interval: number;
        productType?: ProductType;
        callback: (platformInventory: BigCommerceInventory | ShopifyInventory) => void;
    }): number | undefined;
    isProductAvailableForSale(itemId: ItemId, productType?: ProductType): Promise<boolean>;
    getProductQuantity(itemId: ItemId, productType?: ProductType): Promise<number | undefined>;
    getProductMinOrder(itemId: ItemId, productType?: ProductType): Promise<number | undefined>;
    getProductMaxOrder(itemId: ItemId, productType?: ProductType): Promise<number | undefined>;
    getProductPrice(itemId: ItemId, productType?: ProductType): Promise<number | undefined>;
}
export { Inventory };
