import { ItemId, ProductType, SupportedPlatform, StoreConfig, isShopifyStoreConfig } from '../types';
import { BigCommerceInventory } from './platforms/big-commerce/types';
import { ShopifyInventory } from './platforms/shopify/types';
interface Product {
    availableForSale: boolean;
    quantity: number;
    minOrder?: number;
    maxOrder?: number;
}
declare type Variant = Product;
declare type Products = Record<ItemId, Product>;
declare type Variants = Record<ItemId, Variant>;
declare type InventoryJSONResponse = {
    products: Products;
    productVariants: Variants;
};
interface InventoryJSONData {
    products: Products | undefined | null;
    productVariants: Variants | undefined | null;
    status: 'loading' | 'loaded' | 'error';
}
interface BaseInventoryHelper {
    refreshInventoryOnInterval(callback: (inventoryData: InventoryJSONResponse) => void): number | undefined;
    refreshPlatformInventory(props: {
        ids: ItemId[];
        interval: number;
        productType?: ProductType;
        callback: (platformInventory: BigCommerceInventory | ShopifyInventory) => void;
    }): number | undefined;
}
interface PlatformInventoryHelper {
    fetchProductsInventory(itemIds: ItemId[], productType?: ProductType): Promise<BigCommerceInventory | ShopifyInventory>;
    isProductAvailableForSale(itemId: ItemId, productType?: ProductType): Promise<boolean>;
    getProductQuantity(itemId: ItemId, productType?: ProductType): Promise<number | undefined>;
    getProductMinOrder(itemId: ItemId, productType?: ProductType): Promise<number | undefined>;
    getProductMaxOrder(itemId: ItemId, productType?: ProductType): Promise<number | undefined>;
    getProductPrice(itemId: ItemId, productType?: ProductType): Promise<number | undefined>;
}
declare type InventoryHelper = BaseInventoryHelper & PlatformInventoryHelper;
export { InventoryHelper, PlatformInventoryHelper, InventoryJSONResponse, InventoryJSONData, ItemId, SupportedPlatform, StoreConfig, isShopifyStoreConfig, };
