import { Config } from './client';
import { Platform, Item, ItemId, LineItem, ProductType, SelectCurrencyProps, CreateCartInput } from '../../../../types';
import { Meta } from './types';
declare class ShopifyStorefrontPlatform implements Platform {
    private client;
    private storeDomain;
    private storeName;
    private cartKey;
    private sharedCheckoutDomains;
    private isSharedCheckout;
    constructor(config: Config, meta: Meta);
    /**
     *  Returns a `cartId`.
     *
     * Gets a `cartId` from either:
     * 1. Checking `localStorage` of the current site.
     * 2. Loading `sharedCheckoutDomains` to see if they have one in `storage`.
     * 3. Executing `createCart`, which will generate a new Shopify checkout `cartId`.
     *
     * @returns `cartId`
     */
    private getCartId;
    fetchProduct(id: ItemId): Promise<import("./types").ShopifyStorefrontProduct>;
    fetchProductVariant(id: ItemId): Promise<import("./types").ShopifyStorefrontProductVariantWithProduct>;
    fetchCurrencies(): Promise<string[]>;
    selectCurrency(currencyWithItems: SelectCurrencyProps): Promise<{
        id: string;
        items: {
            variant_id: string | number | undefined;
            selectedCurrencyPrice: string | undefined;
            id: string | number;
            quantity: number;
            title: string;
            variant?: import("./types").ShopifyStorefrontProductVariantWithProduct | null | undefined;
            customAttributes: {
                key: string;
                value: string;
            }[];
            discountAllocations: {
                allocatedAmount: import("./types").MoneyV2;
                discountApplication: import("./types").DiscountApplication;
            }[];
            onlineStoreUrl?: string | undefined;
            attrs?: any;
        }[];
        currencyCode: string;
        subtotalPrice: string;
        totalPrice: string;
        checkoutUrl: string;
    }>;
    createCart(input?: CreateCartInput): Promise<{
        id: string;
        items: {
            variant_id: string | number | undefined;
            selectedCurrencyPrice: string | undefined;
            id: string | number;
            quantity: number;
            title: string;
            variant?: import("./types").ShopifyStorefrontProductVariantWithProduct | null | undefined;
            customAttributes: {
                key: string;
                value: string;
            }[];
            discountAllocations: {
                allocatedAmount: import("./types").MoneyV2;
                discountApplication: import("./types").DiscountApplication;
            }[];
            onlineStoreUrl?: string | undefined;
            attrs?: any;
        }[];
        currencyCode: string;
        subtotalPrice: string;
        totalPrice: string;
        checkoutUrl: string;
    }>;
    addItemsToCart(items: Item[]): Promise<{
        id: string;
        items: {
            variant_id: string | number | undefined;
            selectedCurrencyPrice: string | undefined;
            id: string | number;
            quantity: number;
            title: string;
            variant?: import("./types").ShopifyStorefrontProductVariantWithProduct | null | undefined;
            customAttributes: {
                key: string;
                value: string;
            }[];
            discountAllocations: {
                allocatedAmount: import("./types").MoneyV2;
                discountApplication: import("./types").DiscountApplication;
            }[];
            onlineStoreUrl?: string | undefined;
            attrs?: any;
        }[];
        currencyCode: string;
        subtotalPrice: string;
        totalPrice: string;
        checkoutUrl: string;
    }>;
    updateItemsInCart(items: Item[]): Promise<{
        id: string;
        items: {
            variant_id: string | number | undefined;
            selectedCurrencyPrice: string | undefined;
            id: string | number;
            quantity: number;
            title: string;
            variant?: import("./types").ShopifyStorefrontProductVariantWithProduct | null | undefined;
            customAttributes: {
                key: string;
                value: string;
            }[];
            discountAllocations: {
                allocatedAmount: import("./types").MoneyV2;
                discountApplication: import("./types").DiscountApplication;
            }[];
            onlineStoreUrl?: string | undefined;
            attrs?: any;
        }[];
        currencyCode: string;
        subtotalPrice: string;
        totalPrice: string;
        checkoutUrl: string;
    }>;
    removeItemsFromCart(itemIds: ItemId[]): Promise<{
        id: string;
        items: {
            variant_id: string | number | undefined;
            selectedCurrencyPrice: string | undefined;
            id: string | number;
            quantity: number;
            title: string;
            variant?: import("./types").ShopifyStorefrontProductVariantWithProduct | null | undefined;
            customAttributes: {
                key: string;
                value: string;
            }[];
            discountAllocations: {
                allocatedAmount: import("./types").MoneyV2;
                discountApplication: import("./types").DiscountApplication;
            }[];
            onlineStoreUrl?: string | undefined;
            attrs?: any;
        }[];
        currencyCode: string;
        subtotalPrice: string;
        totalPrice: string;
        checkoutUrl: string;
    }>;
    getCart(): Promise<{
        id: string;
        items: {
            variant_id: string | number | undefined;
            selectedCurrencyPrice: string | undefined;
            id: string | number;
            quantity: number;
            title: string;
            variant?: import("./types").ShopifyStorefrontProductVariantWithProduct | null | undefined;
            customAttributes: {
                key: string;
                value: string;
            }[];
            discountAllocations: {
                allocatedAmount: import("./types").MoneyV2;
                discountApplication: import("./types").DiscountApplication;
            }[];
            onlineStoreUrl?: string | undefined;
            attrs?: any;
        }[];
        currencyCode: string;
        subtotalPrice: string;
        totalPrice: string;
        checkoutUrl: string;
    }>;
    getProductTrackingData(item: LineItem): {
        id: string;
        name: string;
        brand: string;
        variant: string;
        price: number;
        compareAtPrice: number;
        quantity: number;
    } | {
        id: string;
        name: string;
        brand: string;
        quantity: number;
        price: number;
        variant?: undefined;
        compareAtPrice?: undefined;
    };
    getItemIdInPlatformSpecificFormat(itemId: ItemId, productType?: ProductType): string;
}
export default ShopifyStorefrontPlatform;
