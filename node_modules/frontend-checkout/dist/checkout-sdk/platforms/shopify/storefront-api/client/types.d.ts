import { MeasuredType, UnitOfMeasurement, Option, Image } from '../types';
export interface DiscountApplicationGraphQlType {
    targetSelection: 'ALL' | 'ENTITLED' | 'EXPLICIT';
    allocationMethod: 'ACROSS' | 'EACH';
    targetType: 'LINE_ITEM' | 'SHIPPING_LINE';
    value: MoneyV2GraphQlType | {
        percentage: number;
    };
    title: string | null | undefined;
    description: string | null | undefined;
    code: string | null | undefined;
    applicable: string | null | undefined;
}
export interface CheckoutLineItemGraphQlType {
    id: string;
    title: string;
    variant: ProductVariantWithProductGraphQlType | null;
    quantity: number;
    customAttributes: {
        key: string;
        value: string;
    }[];
    discountAllocations: {
        allocatedAmount: MoneyV2GraphQlType;
        discountApplication: DiscountApplicationGraphQlType;
    }[];
}
export interface CheckoutGraphQlType {
    id: string | number;
    webUrl: string;
    subtotalPrice: string;
    subtotalPriceV2: MoneyV2GraphQlType;
    totalPriceV2: MoneyV2GraphQlType;
    completedAt: string | null;
    lineItems: PagedConnection<CheckoutLineItemGraphQlType>;
}
export interface ProductGraphQlType {
    id: string;
    availableForSale: boolean;
    createdAt: string;
    updatedAt: string;
    descriptionHtml: string;
    description: string;
    handle: string;
    productType: string;
    title: string;
    vendor: string;
    publishedAt: string;
    onlineStoreUrl: string;
    options: Array<Option>;
    images: PagedConnection<Image>;
    variants: PagedConnection<ProductVariantGraphQlType>;
}
export interface MoneyV2GraphQlType {
    amount: string;
    currencyCode: string;
}
export interface PresentmentPriceGraphQlType {
    price: MoneyV2GraphQlType;
    compareAtPrice: MoneyV2GraphQlType;
}
export interface ProductVariantGraphQlType {
    id: string;
    title: string;
    price: string;
    priceV2: MoneyV2GraphQlType;
    presentmentPrices: PagedConnection<PresentmentPriceGraphQlType>;
    weight: number;
    availableForSale: boolean;
    quantityAvailable: number;
    sku: string;
    compareAtPrice: string;
    compareAtPriceV2: MoneyV2GraphQlType;
    image: Image;
    selectedOptions: {
        name: string;
        value: string;
    }[];
    unitPrice: MoneyV2GraphQlType;
    unitPriceMeasurement: {
        measuredType: MeasuredType | null;
        quantityUnit: UnitOfMeasurement | null;
        quantityValue: number;
        referenceUnit: UnitOfMeasurement | null;
        referenceValue: number;
    };
}
export interface ProductVariantWithProductGraphQlType extends ProductVariantGraphQlType {
    product: {
        id: string;
        handle: string;
    };
}
export interface CurrenciesGraphQlType {
    shop: {
        paymentSettings: {
            enabledPresentmentCurrencies: string[];
        };
    };
}
export declare type CurrenciesWithPrices = Record<string, string>;
export interface PagedConnection<TEntity> {
    pageInfo: {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
    };
    edges: {
        cursor: string;
        node: TEntity;
    }[];
}
export interface CheckoutMutationResult {
    checkout?: CheckoutGraphQlType | null;
    userErrors?: unknown[];
    checkoutUserErrors?: unknown[];
}
