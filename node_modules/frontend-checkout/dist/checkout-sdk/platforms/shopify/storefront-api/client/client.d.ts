import { LineItem, CreateCartInput } from '../../../../../types';
import { ShopifyStorefrontCart, ShopifyStorefrontProduct, Image, ShopifyStorefrontProductVariantWithProduct } from '../types';
import { PagedConnection, CheckoutLineItemGraphQlType, ProductVariantGraphQlType, PresentmentPriceGraphQlType } from './types';
export interface Config {
    /**
     * The domain for the store
     * Typically set to `site.platformPublicDomain`
     */
    storeDomain?: string;
    /**
     * The domain to make requests to shopify to.
     * Typically set to `site.platformDomain`
     */
    platformDomain?: string;
    /**
     * The shopify store access token
     */
    storefrontAccessToken: string;
}
export declare class Client {
    apiUrl: string;
    platformDomain?: string;
    storeDomain?: string;
    defaultHeaders: Record<string, string>;
    constructor(config: Config);
    fetchProductByHandle(handle: string): Promise<ShopifyStorefrontProduct>;
    fetchProduct(id: string): Promise<ShopifyStorefrontProduct>;
    createCart(input?: CreateCartInput): Promise<ShopifyStorefrontCart>;
    fetchCart(id: string): Promise<ShopifyStorefrontCart>;
    addCheckoutLineItems(checkoutId: string | number, lineItems: LineItem[]): Promise<ShopifyStorefrontCart>;
    removeCheckoutLineItems(checkoutId: string | number, lineItemIds: (string | number)[]): Promise<ShopifyStorefrontCart>;
    updateCheckoutLineItems(checkoutId: string | number, lineItems: Partial<LineItem>[]): Promise<ShopifyStorefrontCart>;
    fetchProductVariant(id: string): Promise<ShopifyStorefrontProductVariantWithProduct>;
    fetchCheckoutLineItemsPage(checkoutId: string | number, cursor?: string, pageSize?: number): Promise<PagedConnection<CheckoutLineItemGraphQlType>>;
    fetchProductImagesPage(productId: string, cursor?: string, pageSize?: number): Promise<PagedConnection<Image>>;
    fetchProductVariantsPage(productId: string, cursor?: string, pageSize?: number): Promise<PagedConnection<ProductVariantGraphQlType>>;
    fetchPresentmentPricesPage(productVariantId: string, cursor?: string, pageSize?: number): Promise<PagedConnection<PresentmentPriceGraphQlType>>;
    fetchCurrencies(): Promise<string[]>;
    post<TResult>(queryOrMutation: string, headers?: Record<string, string>): Promise<TResult>;
}
