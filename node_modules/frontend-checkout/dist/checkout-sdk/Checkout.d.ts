import { Platform, Item, ItemId, LineItem, ProductType, CartUpdates, SelectCurrencyProps } from '../types';
import { BigCommerceSDKAddShippingAddressProps, BigCommerceSDKUpdateShippingAddressProps } from './platforms/big-commerce/management-api/types';
declare class Checkout {
    private platform;
    constructor({ platform }: {
        platform: Platform;
    });
    fetchProduct(id: ItemId): Promise<import("../types").Product>;
    fetchProductVariant(id: ItemId): Promise<import("./platforms/shopify/storefront-api/types").ShopifyStorefrontProductVariantWithProduct | import("./platforms/shopify/ajax-api/types").ShopifyAjaxProductVariant>;
    fetchCurrencies(): Promise<string[]>;
    selectCurrency(props: SelectCurrencyProps): Promise<import("../types").Cart>;
    addItemsToCart(itemsToAdd: Item | Item[]): Promise<import("../types").Cart>;
    updateItemsInCart(itemsToUpdate: Item | Item[]): Promise<import("../types").Cart>;
    removeItemsFromCart(itemIdsToRemove: ItemId | ItemId[]): Promise<import("../types").Cart>;
    updateCart(cartUpdates: CartUpdates): Promise<import("../types").Cart>;
    getCart(): Promise<import("../types").Cart>;
    addShippingAddress(props: BigCommerceSDKAddShippingAddressProps): Promise<import("../types").Cart>;
    updateShippingAddress(props: BigCommerceSDKUpdateShippingAddressProps): Promise<import("../types").Cart>;
    getProductTrackingData(item: LineItem): import("./platforms/shopify/storefront-api/types").ShopifyStorefrontProductTrackingData | import("./platforms/shopify/ajax-api/types").ShopifyAjaxProductTrackingData;
    getItemIdInPlatformSpecificFormat(itemId: ItemId, productType: ProductType): ItemId;
}
export default Checkout;
