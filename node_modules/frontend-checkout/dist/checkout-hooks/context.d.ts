import React from 'react';
import { Inventory as InventoryHelpers } from '../inventory-helpers/Inventory';
import { InventoryJSONData } from '../inventory-helpers/types';
import Checkout from '../checkout-sdk/Checkout';
import { Cart, Item, LineItem, StoreConfig, ItemId, SupportedPlatform, ProductType, CartUpdates } from '../types';
import { BigCommerceSDKAddShippingAddressProps } from '../checkout-sdk/platforms/big-commerce/management-api/types';
export declare type CartState = Cart & {
    isCartShown: boolean;
    inventory: InventoryJSONData;
};
interface ItemIdAndProductType {
    id: ItemId;
    type?: ProductType;
}
declare type ProductSearchParams = ItemId | ItemIdAndProductType;
declare type Action = {
    type: 'initial load';
    payload: Cart & {
        inventory: InventoryJSONData;
    };
} | {
    type: 'update cart';
    payload: Cart;
} | {
    type: 'show cart';
} | {
    type: 'hide cart';
} | {
    type: 'update inventory';
    payload: InventoryJSONData;
} | {
    type: 'add currencies';
    payload: string[];
};
declare type Dispatch = (action: Action) => void;
declare type ActionDispatchers = ReturnType<typeof getActionsAvailableToUsers>;
export declare function cartReducer(state: CartState, action: Action): CartState;
declare function CartProvider({ children, platform, storeConfig, }: {
    children: React.ReactNode;
    platform: SupportedPlatform;
    storeConfig: StoreConfig;
}): JSX.Element | null;
declare function getActionsAvailableToUsers(dispatch: Dispatch, checkout: Checkout, stateRef: React.MutableRefObject<CartState>, inventoryHelpers: InventoryHelpers, defaultProductType: ProductType): {
    fetchProduct: (searchParams: ProductSearchParams) => Promise<import("../types").Product | (import("../checkout-sdk/platforms/shopify/storefront-api/types").ShopifyStorefrontProductVariantWithProduct | import("../checkout-sdk/platforms/shopify/ajax-api/types").ShopifyAjaxProductVariant)>;
    addItems: (items: Item | Item[]) => Promise<Cart>;
    updateItems: (items: Item | Item[]) => Promise<Cart>;
    removeItems: (items: ItemId | ItemId[]) => Promise<Cart>;
    updateCart: (cartUpdates: CartUpdates) => Promise<Cart>;
    showCart: () => void;
    hideCart: () => void;
    getProductTrackingData: (item: LineItem) => import("../checkout-sdk/platforms/shopify/storefront-api/types").ShopifyStorefrontProductTrackingData | import("../checkout-sdk/platforms/shopify/ajax-api/types").ShopifyAjaxProductTrackingData;
    isProductInInventory: () => void;
    isProductAvailableForSale: (searchParams: ProductSearchParams) => Promise<boolean>;
    getProductQuantity: (searchParams: ProductSearchParams) => Promise<number | undefined>;
    getProductMinOrder: (searchParams: ProductSearchParams) => Promise<number | undefined>;
    getProductMaxOrder: (searchParams: ProductSearchParams) => Promise<number | undefined>;
    getProductPrice: (searchParams: ProductSearchParams) => Promise<string | number | undefined>;
    getCurrencies: () => Promise<string[]>;
    selectCurrency: (currency: string) => Promise<Cart>;
    getShippingQuotes: (shippingAddress: BigCommerceSDKAddShippingAddressProps['shippingAddress']) => Promise<import("../types").BigCommerceShippingOption[] | undefined>;
};
declare function useInventoryActions(): InventoryHelpers;
declare function useCartState(): CartState;
declare function useCartActions(): ActionDispatchers;
declare function useCart(): [CartState, ActionDispatchers];
export { CartProvider, useInventoryActions, useCartState, useCartActions, useCart };
