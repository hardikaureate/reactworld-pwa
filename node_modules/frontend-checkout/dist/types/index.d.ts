import { ShopifyStorefrontLineItem, ShopifyStorefrontProduct, ShopifyStorefrontProductTrackingData, ShopifyStorefrontProductVariantWithProduct } from '../checkout-sdk/platforms/shopify/storefront-api/types';
import { ShopifyAjaxCartUpdates, ShopifyAjaxLineItem, ShopifyAjaxProduct, ShopifyAjaxProductTrackingData, ShopifyAjaxProductVariant } from '../checkout-sdk/platforms/shopify/ajax-api/types';
import { shopifyPlatform, bigCommercePlatform, graphqlApiType, restApiType, managementApiType } from '../constants';
import { BigCommerceStencilCheckout } from '../checkout-sdk/platforms/big-commerce/stencil/types';
import { BigCommerceSDKAddShippingAddressProps, BigCommerceSDKUpdateShippingAddressProps } from '../checkout-sdk/platforms/big-commerce/management-api/types';
import { CMSInventory } from '../inventory-helpers/platforms/shopify/types';
declare type ItemId = string | number;
declare type ItemIdentifier = {
    id: ItemId;
} | {
    line: number;
};
declare type Item = ItemIdentifier & {
    quantity: number;
    [key: string]: any;
};
declare type Product = ShopifyStorefrontProduct | ShopifyAjaxProduct;
declare type ProductVariant = ShopifyStorefrontProductVariantWithProduct | ShopifyAjaxProductVariant;
declare const productTypes: readonly ["Product", "ProductVariant"];
declare type ProductType = typeof productTypes[number];
declare type LineItem = ShopifyStorefrontLineItem | ShopifyAjaxLineItem | Item;
declare type ProductTrackingData = ShopifyStorefrontProductTrackingData | ShopifyAjaxProductTrackingData;
declare type CartUpdates = ShopifyAjaxCartUpdates;
declare type SelectCurrencyProps = {
    currency: string;
    lineItems?: CreateCartInput['lineItems'];
};
declare type CreateCartInput = {
    presentmentCurrencyCode: string;
    lineItems?: {
        quantity: number;
        variantId: string | number;
        customAttributes: {
            key: string;
            value: string;
        }[];
    }[];
};
declare type CreateCartInputLineItem = {
    quantity: number;
    variantId: string | number;
    customAttributes: {
        key: string;
        value: string;
    }[];
};
interface ShopifyCart {
    attributes?: Record<string, string>;
    note?: string | null;
    currencies?: string[];
}
interface BigCommerceShippingOption {
    id: string;
    type: string;
    description: string;
    imageUrl: string;
    cost: number;
    transitTime: string;
    additionalDescription: string;
}
interface BigCommerceConsignment {
    id: string;
    shippingAddress: {
        id: string;
        firstName: string;
        lastName: string;
        email: string;
        company: string;
        address1: string;
        address2: string;
        city: string;
        state: string;
        stateCode: string;
        countryCode: string;
        postalCode: string;
        phone: string;
        customFields: {
            id: string;
            value: string;
        }[];
    };
    availableShippingOptions: BigCommerceShippingOption[];
    selectedShippingOption: BigCommerceShippingOption | null;
    couponDiscounts: {
        code: string;
        amount: number;
    }[];
    discounts: {
        id: number;
    }[];
    shippingCostIncTax: number;
    shippingCostExTax: number;
    handlingCostIncTax: number;
    handlingCostExTax: number;
    lineItemIds: string[];
}
interface BigCommerceCart {
    taxTotal?: number;
    giftCertificates?: BigCommerceStencilCheckout['giftCertificates'];
    coupons?: BigCommerceStencilCheckout['coupons'];
    discountAmount?: string | number | null;
    consignment: BigCommerceConsignment | null;
}
declare type PlatformCart<PlatformSpecificProps> = {
    id: string;
    items: LineItem[];
    currencyCode: string;
    subtotalPrice: string | number;
    totalPrice?: string | number;
    checkoutUrl: string;
    attributes?: Record<string, string>;
    note?: string | null;
} & PlatformSpecificProps;
declare type Cart = PlatformCart<ShopifyCart | BigCommerceCart>;
interface Platform {
    fetchProduct?: (id: ItemId) => Promise<Product>;
    fetchProductVariant?: (id: ItemId) => Promise<ProductVariant>;
    fetchProductIsInInventory?: (id: ItemId, type?: ProductType) => Promise<boolean>;
    fetchProductAvailableForSale?: (id: ItemId, type: ProductType) => Promise<boolean>;
    fetchProductQuantityAvailable?: (id: ItemId, type: ProductType) => Promise<number | undefined>;
    fetchProductMinOrder?: (id: ItemId, type?: ProductType) => Promise<number | undefined>;
    fetchProductMaxOrder?: (id: ItemId, type?: ProductType) => Promise<number | undefined>;
    fetchProductPrice?: (id: ItemId) => Promise<ProductVariant['price'] | undefined>;
    fetchCurrencies?: () => Promise<string[]>;
    selectCurrency?: (currencyWithItems: SelectCurrencyProps) => Promise<Cart>;
    addItemsToCart: (items: Item[]) => Promise<Cart>;
    updateItemsInCart: (items: Item[]) => Promise<Cart>;
    removeItemsFromCart: (itemIds: ItemId[]) => Promise<Cart>;
    getCart: () => Promise<Cart>;
    updateCart?: (cart: CartUpdates) => Promise<Cart>;
    updateCustomerIdInCart?: () => Promise<void>;
    addShippingAddress?: (props: BigCommerceSDKAddShippingAddressProps) => Promise<Cart>;
    updateShippingAddress?: (props: BigCommerceSDKUpdateShippingAddressProps) => Promise<Cart>;
    getProductTrackingData: (item: LineItem) => ProductTrackingData;
    getItemIdInPlatformSpecificFormat: (itemId: ItemId, productType: ProductType) => ItemId;
}
declare type SupportedPlatform = typeof shopifyPlatform | typeof bigCommercePlatform;
declare type PlatformApiType = typeof graphqlApiType | typeof restApiType | typeof managementApiType;
declare type BaseStoreConfig = {
    storeId?: string;
    storeName?: string;
    platformApiType?: PlatformApiType;
    sharedCheckoutDomains?: string[];
    inventory: CMSInventory;
};
declare type ShopifyStoreConfig = BaseStoreConfig & Partial<{
    storePlatformDomain: string;
    storeDomain: string;
    storeToken: string;
}>;
declare type BigCommerceStoreConfig = BaseStoreConfig;
declare type StoreConfig = ShopifyStoreConfig | BigCommerceStoreConfig;
declare const isShopifyStoreConfig: (config: StoreConfig) => config is ShopifyStoreConfig;
declare const isProductType: (productType: unknown) => productType is "Product" | "ProductVariant";
interface UseInventoryProps {
    ids: ItemId[];
    productType?: ProductType;
    interval?: number;
}
export { BigCommerceStoreConfig, BigCommerceShippingOption, BigCommerceConsignment, BigCommerceCart, ShopifyCart, Cart, PlatformCart, CartUpdates, Item, ItemId, LineItem, Platform, Product, ProductType, isProductType, ShopifyStoreConfig, StoreConfig, SupportedPlatform, PlatformApiType, isShopifyStoreConfig, SelectCurrencyProps, CreateCartInput, CreateCartInputLineItem, UseInventoryProps, };
